
CpE301L9E2a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  0000032c  000003a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000055e  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d9  00000000  00000000  000009d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039c  00000000  00000000  00000baf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00000f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000021b  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000265  00000000  00000000  000011fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e2       	ldi	r30, 0x2C	; 44
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 32       	cpi	r26, 0x20	; 32
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	71 d0       	rcall	.+226    	; 0x1f2 <main>
 110:	0b c1       	rjmp	.+534    	; 0x328 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <lcdCommanda>:
{'C','D','E','F'},
};

void lcdCommanda (unsigned char cmnd)
{
	LCD_DPRT = cmnd; //send cmnd to data port
 114:	80 93 02 01 	sts	0x0102, r24
	LCD_CPRT &= ~(1<<LCD_RS); //RS = 0 for command
 118:	28 98       	cbi	0x05, 0	; 5
	LCD_CPRT &= ~(1<<LCD_RW); //RW = 0 for write
 11a:	29 98       	cbi	0x05, 1	; 5
	LCD_CPRT |= (1<<LCD_EN); //EN = 1 for H-to-L pulse
 11c:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	8a 95       	dec	r24
 122:	f1 f7       	brne	.-4      	; 0x120 <lcdCommanda+0xc>
 124:	00 c0       	rjmp	.+0      	; 0x126 <lcdCommanda+0x12>
	_delay_us(1); //wait to make enable wide
	LCD_CPRT &= ~(1<<LCD_EN); //EN = 0 for H-to_L pulse
 126:	2a 98       	cbi	0x05, 2	; 5
 128:	87 ec       	ldi	r24, 0xC7	; 199
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcdCommanda+0x18>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcdCommanda+0x1e>
 132:	00 00       	nop
 134:	08 95       	ret

00000136 <lcdData>:
	_delay_us(100); //wait to make enable wide
}

void lcdData(unsigned char data)
{
	LCD_DPRT = data; //send data to data port
 136:	80 93 02 01 	sts	0x0102, r24
	LCD_CPRT |= (1<<LCD_RS); //RS = 1 for data
 13a:	28 9a       	sbi	0x05, 0	; 5
	LCD_CPRT &= ~(1<<LCD_RW); //RW = 0 for write
 13c:	29 98       	cbi	0x05, 1	; 5
	LCD_CPRT |= (1<<LCD_EN); //EN = 1 for H-to-L pulse
 13e:	2a 9a       	sbi	0x05, 2	; 5
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	8a 95       	dec	r24
 144:	f1 f7       	brne	.-4      	; 0x142 <lcdData+0xc>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcdData+0x12>
	_delay_us(1); //wait to make enable wide
	LCD_CPRT &= ~(1<<LCD_EN); //EN = 0 for H-to_L pulse
 148:	2a 98       	cbi	0x05, 2	; 5
 14a:	87 ec       	ldi	r24, 0xC7	; 199
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <lcdData+0x18>
 152:	00 c0       	rjmp	.+0      	; 0x154 <lcdData+0x1e>
 154:	00 00       	nop
 156:	08 95       	ret

00000158 <lcd_init>:
	_delay_us(100); //wait to make enable wide
}

void lcd_init()
{
	LCD_DDDR = 0xFF;
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	80 93 01 01 	sts	0x0101, r24
	LCD_CDDR |= (1<<LCD_RS) | (1<<LCD_RW) | (1<<LCD_EN);
 15e:	84 b1       	in	r24, 0x04	; 4
 160:	87 60       	ori	r24, 0x07	; 7
 162:	84 b9       	out	0x04, r24	; 4
	LCD_CPRT &=~(1<<LCD_EN); //LCD_EN = 0
 164:	2a 98       	cbi	0x05, 2	; 5
 166:	8f e9       	ldi	r24, 0x9F	; 159
 168:	9f e0       	ldi	r25, 0x0F	; 15
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_init+0x12>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcd_init+0x18>
 170:	00 00       	nop
	_delay_us(2000); //wait for init
	lcdCommanda(0x38); //inti. LCD 2 line, 5x7
 172:	88 e3       	ldi	r24, 0x38	; 56
 174:	cf df       	rcall	.-98     	; 0x114 <lcdCommanda>
	lcdCommanda(0x0E); //display on, cursor on
 176:	8e e0       	ldi	r24, 0x0E	; 14
 178:	cd df       	rcall	.-102    	; 0x114 <lcdCommanda>
	lcdCommanda(0x01); //clear LCD
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	cb df       	rcall	.-106    	; 0x114 <lcdCommanda>
 17e:	8f e9       	ldi	r24, 0x9F	; 159
 180:	9f e0       	ldi	r25, 0x0F	; 15
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_init+0x2a>
 186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_init+0x30>
 188:	00 00       	nop
	_delay_us(2000); //wait
	lcdCommanda(0x06); //shift cursor right
 18a:	86 e0       	ldi	r24, 0x06	; 6
 18c:	c3 cf       	rjmp	.-122    	; 0x114 <lcdCommanda>
 18e:	08 95       	ret

00000190 <lcd_gotoxy>:
}

void lcd_gotoxy(unsigned char x, unsigned char y)
{
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	1f 92       	push	r1
 196:	1f 92       	push	r1
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstCharAdr[] = {0x80, 0xC0};
 19c:	90 e8       	ldi	r25, 0x80	; 128
 19e:	99 83       	std	Y+1, r25	; 0x01
 1a0:	90 ec       	ldi	r25, 0xC0	; 192
 1a2:	9a 83       	std	Y+2, r25	; 0x02
 1a4:	81 50       	subi	r24, 0x01	; 1
	lcdCommanda(firstCharAdr[y-1] + x -1);
 1a6:	fe 01       	movw	r30, r28
 1a8:	e6 0f       	add	r30, r22
 1aa:	f1 1d       	adc	r31, r1
 1ac:	90 81       	ld	r25, Z
 1ae:	89 0f       	add	r24, r25
 1b0:	b1 df       	rcall	.-158    	; 0x114 <lcdCommanda>
 1b2:	87 ec       	ldi	r24, 0xC7	; 199
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_gotoxy+0x26>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <lcd_gotoxy+0x2c>
 1bc:	00 00       	nop
	_delay_us(100);
}
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <lcd_print>:

void lcd_print(char * str)
{
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	fc 01       	movw	r30, r24
	unsigned char i = 0;
	while (str[i]!=0)
 1d0:	80 81       	ld	r24, Z
 1d2:	88 23       	and	r24, r24
 1d4:	51 f0       	breq	.+20     	; 0x1ea <lcd_print+0x22>
 1d6:	8f 01       	movw	r16, r30
 1d8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcdData(str[i]);
 1da:	ad df       	rcall	.-166    	; 0x136 <lcdData>
		i++;
 1dc:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(char * str)
{
	unsigned char i = 0;
	while (str[i]!=0)
 1de:	f8 01       	movw	r30, r16
 1e0:	ec 0f       	add	r30, r28
 1e2:	f1 1d       	adc	r31, r1
 1e4:	80 81       	ld	r24, Z
 1e6:	81 11       	cpse	r24, r1
 1e8:	f8 cf       	rjmp	.-16     	; 0x1da <lcd_print+0x12>
	{
		lcdData(str[i]);
		i++;
	}
}
 1ea:	cf 91       	pop	r28
 1ec:	1f 91       	pop	r17
 1ee:	0f 91       	pop	r16
 1f0:	08 95       	ret

000001f2 <main>:

int main(void)
{
	unsigned char rowloc, colloc;
	char data;
	lcd_init();
 1f2:	b2 df       	rcall	.-156    	; 0x158 <lcd_init>
	lcd_gotoxy(1,1);
 1f4:	61 e0       	ldi	r22, 0x01	; 1
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	cb df       	rcall	.-106    	; 0x190 <lcd_gotoxy>
	KEY_DDR = 0x0F;
 1fa:	8f e0       	ldi	r24, 0x0F	; 15
 1fc:	81 b9       	out	0x01, r24	; 1
	KEY_PRT = 0xFF;
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	82 b9       	out	0x02, r24	; 2
			colloc = (KEY_PIN & 0xF0); //read columns
		} while (colloc == 0xF0); //wait for key press

		while(1)
		{
			KEY_PRT = 0xFE; //ground row 1
 202:	de ef       	ldi	r29, 0xFE	; 254
			KEY_PIN;
			colloc = (KEY_PIN & 0xF0); //read the columns
			if (colloc != 0xF0) //column detected
			{
				rowloc = 0; //save row location
 204:	00 e0       	ldi	r16, 0x00	; 0
				break; //exit while loop
			}
			KEY_PRT = 0xFD; //ground row 1
 206:	0f 2e       	mov	r0, r31
 208:	fd ef       	ldi	r31, 0xFD	; 253
 20a:	ef 2e       	mov	r14, r31
 20c:	f0 2d       	mov	r31, r0
			KEY_PIN;
			colloc = (KEY_PIN & 0xF0); //read the columns
			if(colloc != 0xF0) //column detected
			{
				rowloc = 1; //save row location
 20e:	ff 24       	eor	r15, r15
 210:	f3 94       	inc	r15
				break; //exit while loop
			}
			KEY_PRT = 0xFB; //ground row 1
 212:	0f 2e       	mov	r0, r31
 214:	fb ef       	ldi	r31, 0xFB	; 251
 216:	af 2e       	mov	r10, r31
 218:	f0 2d       	mov	r31, r0
			KEY_PIN;
			colloc = (KEY_PIN & 0xF0); //read the columns
			if(colloc != 0xF0) //column detected
			{
				rowloc = 2; //save row location
 21a:	12 e0       	ldi	r17, 0x02	; 2
				break; //exit while loop
			}
			KEY_PRT = 0xF7; //ground row 1
 21c:	0f 2e       	mov	r0, r31
 21e:	f7 ef       	ldi	r31, 0xF7	; 247
 220:	bf 2e       	mov	r11, r31
 222:	f0 2d       	mov	r31, r0
			KEY_PIN;
			colloc = (KEY_PIN & 0xF0); //read the columns
			if(colloc != 0xF0)
			{
				rowloc = 3; //save row location
 224:	0f 2e       	mov	r0, r31
 226:	f3 e0       	ldi	r31, 0x03	; 3
 228:	cf 2e       	mov	r12, r31
 22a:	f0 2d       	mov	r31, r0

	while(1)
	{
		do
		{
			KEY_PRT &= 0xF0; //ground all rows at once
 22c:	92 b1       	in	r25, 0x02	; 2
 22e:	90 7f       	andi	r25, 0xF0	; 240
 230:	92 b9       	out	0x02, r25	; 2
			colloc = (KEY_PIN & 0xF0); //read the columns
 232:	90 b1       	in	r25, 0x00	; 0
 234:	90 7f       	andi	r25, 0xF0	; 240
		} while (colloc != 0xF0); //check until all keys released
 236:	90 3f       	cpi	r25, 0xF0	; 240
 238:	c9 f7       	brne	.-14     	; 0x22c <main+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23a:	2f e7       	ldi	r18, 0x7F	; 127
 23c:	88 e3       	ldi	r24, 0x38	; 56
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	21 50       	subi	r18, 0x01	; 1
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	90 40       	sbci	r25, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x4e>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x58>
 24a:	00 00       	nop
		do
		{
			do
			{
				_delay_ms(50); //call delay
				colloc = (KEY_PIN & 0xF0); //see if any key is pressed
 24c:	90 b1       	in	r25, 0x00	; 0
 24e:	90 7f       	andi	r25, 0xF0	; 240
			} while (colloc == 0xF0); //keep checking for key press
 250:	90 3f       	cpi	r25, 0xF0	; 240
 252:	99 f3       	breq	.-26     	; 0x23a <main+0x48>
 254:	2f e7       	ldi	r18, 0x7F	; 127
 256:	88 e3       	ldi	r24, 0x38	; 56
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	21 50       	subi	r18, 0x01	; 1
 25c:	80 40       	sbci	r24, 0x00	; 0
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <main+0x68>
 262:	00 c0       	rjmp	.+0      	; 0x264 <main+0x72>
 264:	00 00       	nop
			_delay_ms(50); //call delay for debounce
			colloc = (KEY_PIN & 0xF0); //read columns
 266:	90 b1       	in	r25, 0x00	; 0
 268:	90 7f       	andi	r25, 0xF0	; 240
		} while (colloc == 0xF0); //wait for key press
 26a:	90 3f       	cpi	r25, 0xF0	; 240
 26c:	31 f3       	breq	.-52     	; 0x23a <main+0x48>

		while(1)
		{
			KEY_PRT = 0xFE; //ground row 1
 26e:	d2 b9       	out	0x02, r29	; 2
			KEY_PIN;
 270:	80 b1       	in	r24, 0x00	; 0
			colloc = (KEY_PIN & 0xF0); //read the columns
 272:	90 b1       	in	r25, 0x00	; 0
 274:	90 7f       	andi	r25, 0xF0	; 240
			if (colloc != 0xF0) //column detected
 276:	90 3f       	cpi	r25, 0xF0	; 240
 278:	a1 f4       	brne	.+40     	; 0x2a2 <main+0xb0>
			{
				rowloc = 0; //save row location
				break; //exit while loop
			}
			KEY_PRT = 0xFD; //ground row 1
 27a:	e2 b8       	out	0x02, r14	; 2
			KEY_PIN;
 27c:	80 b1       	in	r24, 0x00	; 0
			colloc = (KEY_PIN & 0xF0); //read the columns
 27e:	90 b1       	in	r25, 0x00	; 0
 280:	90 7f       	andi	r25, 0xF0	; 240
			if(colloc != 0xF0) //column detected
 282:	90 3f       	cpi	r25, 0xF0	; 240
 284:	81 f4       	brne	.+32     	; 0x2a6 <main+0xb4>
			{
				rowloc = 1; //save row location
				break; //exit while loop
			}
			KEY_PRT = 0xFB; //ground row 1
 286:	a2 b8       	out	0x02, r10	; 2
			KEY_PIN;
 288:	80 b1       	in	r24, 0x00	; 0
			colloc = (KEY_PIN & 0xF0); //read the columns
 28a:	90 b1       	in	r25, 0x00	; 0
 28c:	90 7f       	andi	r25, 0xF0	; 240
			if(colloc != 0xF0) //column detected
 28e:	90 3f       	cpi	r25, 0xF0	; 240
 290:	61 f4       	brne	.+24     	; 0x2aa <main+0xb8>
			{
				rowloc = 2; //save row location
				break; //exit while loop
			}
			KEY_PRT = 0xF7; //ground row 1
 292:	b2 b8       	out	0x02, r11	; 2
			KEY_PIN;
 294:	80 b1       	in	r24, 0x00	; 0
			colloc = (KEY_PIN & 0xF0); //read the columns
 296:	90 b1       	in	r25, 0x00	; 0
 298:	90 7f       	andi	r25, 0xF0	; 240
			if(colloc != 0xF0)
 29a:	90 3f       	cpi	r25, 0xF0	; 240
 29c:	59 f1       	breq	.+86     	; 0x2f4 <main+0x102>
			{
				rowloc = 3; //save row location
 29e:	cc 2d       	mov	r28, r12
 2a0:	05 c0       	rjmp	.+10     	; 0x2ac <main+0xba>
			KEY_PRT = 0xFE; //ground row 1
			KEY_PIN;
			colloc = (KEY_PIN & 0xF0); //read the columns
			if (colloc != 0xF0) //column detected
			{
				rowloc = 0; //save row location
 2a2:	c0 2f       	mov	r28, r16
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <main+0xba>
			KEY_PRT = 0xFD; //ground row 1
			KEY_PIN;
			colloc = (KEY_PIN & 0xF0); //read the columns
			if(colloc != 0xF0) //column detected
			{
				rowloc = 1; //save row location
 2a6:	cf 2d       	mov	r28, r15
 2a8:	01 c0       	rjmp	.+2      	; 0x2ac <main+0xba>
			KEY_PRT = 0xFB; //ground row 1
			KEY_PIN;
			colloc = (KEY_PIN & 0xF0); //read the columns
			if(colloc != 0xF0) //column detected
			{
				rowloc = 2; //save row location
 2aa:	c1 2f       	mov	r28, r17
				break; //exit while loop
			}
			break;
		}
		//check column and send result to Port B
		if(colloc == 0xE0)
 2ac:	90 3e       	cpi	r25, 0xE0	; 224
 2ae:	51 f4       	brne	.+20     	; 0x2c4 <main+0xd2>
		data = (keypad[rowloc][0]);
 2b0:	ec 2f       	mov	r30, r28
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	ee 0f       	add	r30, r30
 2b6:	ff 1f       	adc	r31, r31
 2b8:	ee 0f       	add	r30, r30
 2ba:	ff 1f       	adc	r31, r31
 2bc:	e0 50       	subi	r30, 0x00	; 0
 2be:	fe 4f       	sbci	r31, 0xFE	; 254
 2c0:	d0 80       	ld	r13, Z
 2c2:	21 c0       	rjmp	.+66     	; 0x306 <main+0x114>
		else if(colloc == 0xD0)
 2c4:	90 3d       	cpi	r25, 0xD0	; 208
 2c6:	51 f4       	brne	.+20     	; 0x2dc <main+0xea>
		data = (keypad[rowloc][1]);
 2c8:	ec 2f       	mov	r30, r28
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	ee 0f       	add	r30, r30
 2ce:	ff 1f       	adc	r31, r31
 2d0:	ee 0f       	add	r30, r30
 2d2:	ff 1f       	adc	r31, r31
 2d4:	e0 50       	subi	r30, 0x00	; 0
 2d6:	fe 4f       	sbci	r31, 0xFE	; 254
 2d8:	d1 80       	ldd	r13, Z+1	; 0x01
 2da:	15 c0       	rjmp	.+42     	; 0x306 <main+0x114>
		else if(colloc == 0xB0)
 2dc:	90 3b       	cpi	r25, 0xB0	; 176
 2de:	51 f4       	brne	.+20     	; 0x2f4 <main+0x102>
		data = (keypad[rowloc][2]);
 2e0:	ec 2f       	mov	r30, r28
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	ee 0f       	add	r30, r30
 2e6:	ff 1f       	adc	r31, r31
 2e8:	ee 0f       	add	r30, r30
 2ea:	ff 1f       	adc	r31, r31
 2ec:	e0 50       	subi	r30, 0x00	; 0
 2ee:	fe 4f       	sbci	r31, 0xFE	; 254
 2f0:	d2 80       	ldd	r13, Z+2	; 0x02
 2f2:	09 c0       	rjmp	.+18     	; 0x306 <main+0x114>
		else
		data = (keypad[rowloc][3]);
 2f4:	ec 2f       	mov	r30, r28
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	ee 0f       	add	r30, r30
 2fa:	ff 1f       	adc	r31, r31
 2fc:	ee 0f       	add	r30, r30
 2fe:	ff 1f       	adc	r31, r31
 300:	e0 50       	subi	r30, 0x00	; 0
 302:	fe 4f       	sbci	r31, 0xFE	; 254
 304:	d3 80       	ldd	r13, Z+3	; 0x03
		if(data != 0)
 306:	dd 20       	and	r13, r13
 308:	09 f4       	brne	.+2      	; 0x30c <main+0x11a>
 30a:	90 cf       	rjmp	.-224    	; 0x22c <main+0x3a>
		{
			lcd_gotoxy(1,2);
 30c:	61 2f       	mov	r22, r17
 30e:	8f 2d       	mov	r24, r15
 310:	3f df       	rcall	.-386    	; 0x190 <lcd_gotoxy>
			lcd_print("  ");
 312:	8c e1       	ldi	r24, 0x1C	; 28
 314:	92 e0       	ldi	r25, 0x02	; 2
 316:	58 df       	rcall	.-336    	; 0x1c8 <lcd_print>
			lcdData(data);
 318:	8d 2d       	mov	r24, r13
 31a:	0d df       	rcall	.-486    	; 0x136 <lcdData>
			lcd_print(" was pressed  ");
 31c:	80 e1       	ldi	r24, 0x10	; 16
 31e:	92 e0       	ldi	r25, 0x02	; 2
 320:	53 df       	rcall	.-346    	; 0x1c8 <lcd_print>
			lcdCommanda(0x02);
 322:	81 2f       	mov	r24, r17
 324:	f7 de       	rcall	.-530    	; 0x114 <lcdCommanda>
 326:	82 cf       	rjmp	.-252    	; 0x22c <main+0x3a>

00000328 <_exit>:
 328:	f8 94       	cli

0000032a <__stop_program>:
 32a:	ff cf       	rjmp	.-2      	; 0x32a <__stop_program>
