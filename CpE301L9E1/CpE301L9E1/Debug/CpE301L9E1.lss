
CpE301L9E1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000001a6  0000021a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000042c  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ae  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ae  00000000  00000000  000008ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00000a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ed  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000176  00000000  00000000  00000cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00000e73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  8e:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcdCommanda>:
//****************************************************************

//****************************************************************
void lcdCommanda (unsigned char cmnd)
{
	LCD_DPRT = cmnd; //send cmnd to data port
  96:	8b b9       	out	0x0b, r24	; 11
	LCD_CPRT &= ~(1<<LCD_RS); //RS = 0 for command
  98:	28 98       	cbi	0x05, 0	; 5
	LCD_CPRT &= ~(1<<LCD_RW); //RW = 0 for write
  9a:	29 98       	cbi	0x05, 1	; 5
	LCD_CPRT |= (1<<LCD_EN); //EN = 1 for H-to-L pulse
  9c:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	8a 95       	dec	r24
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcdCommanda+0xa>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <lcdCommanda+0x10>
	_delay_us(1); //wait to make enable wide
	LCD_CPRT &= ~(1<<LCD_EN); //EN = 0 for H-to_L pulse
  a6:	2a 98       	cbi	0x05, 2	; 5
  a8:	87 ec       	ldi	r24, 0xC7	; 199
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <lcdCommanda+0x16>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <lcdCommanda+0x1c>
  b2:	00 00       	nop
  b4:	08 95       	ret

000000b6 <lcdData>:
	_delay_us(100); //wait to make enable wide
}
void lcdData(unsigned char data)
{
	LCD_DPRT = data; //send data to data port
  b6:	8b b9       	out	0x0b, r24	; 11
	LCD_CPRT |= (1<<LCD_RS); //RS = 1 for data
  b8:	28 9a       	sbi	0x05, 0	; 5
	LCD_CPRT &= ~(1<<LCD_RW); //RW = 0 for write
  ba:	29 98       	cbi	0x05, 1	; 5
	LCD_CPRT |= (1<<LCD_EN); //EN = 1 for H-to-L pulse
  bc:	2a 9a       	sbi	0x05, 2	; 5
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	8a 95       	dec	r24
  c2:	f1 f7       	brne	.-4      	; 0xc0 <lcdData+0xa>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <lcdData+0x10>
	_delay_us(1); //wait to make enable wide
	LCD_CPRT &= ~(1<<LCD_EN); //EN = 0 for H-to_L pulse
  c6:	2a 98       	cbi	0x05, 2	; 5
  c8:	87 ec       	ldi	r24, 0xC7	; 199
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcdData+0x16>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcdData+0x1c>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <lcd_init>:
	_delay_us(100); //wait to make enable wide
}
void lcd_init()
{
	LCD_DDDR = 0xFF;
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	8a b9       	out	0x0a, r24	; 10
	LCD_CDDR |= (1<<LCD_RS) | (1<<LCD_RW) | (1<<LCD_EN);
  da:	84 b1       	in	r24, 0x04	; 4
  dc:	87 60       	ori	r24, 0x07	; 7
  de:	84 b9       	out	0x04, r24	; 4
	LCD_CPRT &=~(1<<LCD_EN); //LCD_EN = 0
  e0:	2a 98       	cbi	0x05, 2	; 5
  e2:	8f e9       	ldi	r24, 0x9F	; 159
  e4:	9f e0       	ldi	r25, 0x0F	; 15
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <lcd_init+0x10>
  ea:	00 c0       	rjmp	.+0      	; 0xec <lcd_init+0x16>
  ec:	00 00       	nop
	_delay_us(2000); //wait for init
	lcdCommanda(0x38); //inti. LCD 2 line, 5x7
  ee:	88 e3       	ldi	r24, 0x38	; 56
  f0:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommanda>
	lcdCommanda(0x0E); //display on, cursor on
  f4:	8e e0       	ldi	r24, 0x0E	; 14
  f6:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommanda>
	lcdCommanda(0x01); //clear LCD
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommanda>
 100:	8f e9       	ldi	r24, 0x9F	; 159
 102:	9f e0       	ldi	r25, 0x0F	; 15
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <lcd_init+0x2e>
 108:	00 c0       	rjmp	.+0      	; 0x10a <lcd_init+0x34>
 10a:	00 00       	nop
	_delay_us(2000); //wait
	lcdCommanda(0x06); //shift cursor right
 10c:	86 e0       	ldi	r24, 0x06	; 6
 10e:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommanda>
 112:	08 95       	ret

00000114 <lcd_gotoxy>:
}
void lcd_gotoxy(unsigned char x, unsigned char y)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	00 d0       	rcall	.+0      	; 0x11a <lcd_gotoxy+0x6>
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstCharAdr[] = {0x80, 0xC0};
 11e:	90 e8       	ldi	r25, 0x80	; 128
 120:	99 83       	std	Y+1, r25	; 0x01
 122:	90 ec       	ldi	r25, 0xC0	; 192
 124:	9a 83       	std	Y+2, r25	; 0x02
 126:	81 50       	subi	r24, 0x01	; 1
	lcdCommanda(firstCharAdr[y-1] + x -1);
 128:	fe 01       	movw	r30, r28
 12a:	e6 0f       	add	r30, r22
 12c:	f1 1d       	adc	r31, r1
 12e:	90 81       	ld	r25, Z
 130:	89 0f       	add	r24, r25
 132:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommanda>
 136:	87 ec       	ldi	r24, 0xC7	; 199
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_gotoxy+0x26>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_gotoxy+0x2c>
 140:	00 00       	nop
	_delay_us(100);
}
 142:	0f 90       	pop	r0
 144:	0f 90       	pop	r0
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <lcd_print>:
void lcd_print(char * str)
{
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	fc 01       	movw	r30, r24
	unsigned char i = 0;
	while (str[i]!=0)
 154:	80 81       	ld	r24, Z
 156:	88 23       	and	r24, r24
 158:	59 f0       	breq	.+22     	; 0x170 <lcd_print+0x24>
 15a:	8f 01       	movw	r16, r30
 15c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcdData(str[i]);
 15e:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcdData>
		i++;
 162:	cf 5f       	subi	r28, 0xFF	; 255
	_delay_us(100);
}
void lcd_print(char * str)
{
	unsigned char i = 0;
	while (str[i]!=0)
 164:	f8 01       	movw	r30, r16
 166:	ec 0f       	add	r30, r28
 168:	f1 1d       	adc	r31, r1
 16a:	80 81       	ld	r24, Z
 16c:	81 11       	cpse	r24, r1
 16e:	f7 cf       	rjmp	.-18     	; 0x15e <lcd_print+0x12>
	{
		lcdData(str[i]);
		i++;
	}
}
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <main>:

int main(void)
{		
	lcd_init();
 178:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_init>
	lcd_gotoxy(1,1);
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_gotoxy>
	lcd_print("Sikorski, Jason");
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_print>
	lcd_gotoxy(1,2);
 18c:	62 e0       	ldi	r22, 0x02	; 2
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_gotoxy>
	lcd_print(" CpE301: Lab 9  ");
 194:	80 e1       	ldi	r24, 0x10	; 16
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_print>
	return 0;
}
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	08 95       	ret

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
