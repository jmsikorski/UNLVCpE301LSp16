
CpE301L7E3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000012f  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000e2  00000000  00000000  000003ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000e7  00000000  00000000  0000048d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000185  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00000795  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  88:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <usart_init>:
    while (1);
}

void usart_init()
{
	UCSR0B = (1<<TXEN0) | (1<<RXEN0) | (1<<RXCIE0) | (1<<UMSEL00); // TX Enable, RX Enable, RX Interrupt enabled
  90:	88 ed       	ldi	r24, 0xD8	; 216
  92:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8 bit data segment
  96:	86 e0       	ldi	r24, 0x06	; 6
  98:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0 = 0x33; // Baud rate
  9c:	83 e3       	ldi	r24, 0x33	; 51
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	90 93 c5 00 	sts	0x00C5, r25
  a4:	80 93 c4 00 	sts	0x00C4, r24
  a8:	08 95       	ret

000000aa <main>:
}

int main(void)
{
    /* Replace with your application code */
	usart_init();
  aa:	0e 94 48 00 	call	0x90	; 0x90 <usart_init>
	sei();
  ae:	78 94       	sei
    while (1);
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <main+0x6>

000000b2 <usart_send>:
	UBRR0 = 0x33; // Baud rate
}

void usart_send (char data)
{
	while (! (UCSR0A & (1<<UDRE0)));
  b2:	e0 ec       	ldi	r30, 0xC0	; 192
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	90 81       	ld	r25, Z
  b8:	95 ff       	sbrs	r25, 5
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <usart_send+0x4>
	UDR0 = data;
  bc:	80 93 c6 00 	sts	0x00C6, r24
  c0:	08 95       	ret

000000c2 <__vector_18>:
void usart_send(char);
volatile char a;
char recd = 0;

ISR(USART_RX_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	a = UDR0;
  e4:	80 91 c6 00 	lds	r24, 0x00C6
  e8:	80 93 00 01 	sts	0x0100, r24
	if(a > 64 && a < 91)
  ec:	80 91 00 01 	lds	r24, 0x0100
  f0:	81 34       	cpi	r24, 0x41	; 65
  f2:	50 f0       	brcs	.+20     	; 0x108 <__vector_18+0x46>
  f4:	80 91 00 01 	lds	r24, 0x0100
  f8:	8b 35       	cpi	r24, 0x5B	; 91
  fa:	30 f4       	brcc	.+12     	; 0x108 <__vector_18+0x46>
		a += 32;
  fc:	80 91 00 01 	lds	r24, 0x0100
 100:	80 5e       	subi	r24, 0xE0	; 224
 102:	80 93 00 01 	sts	0x0100, r24
 106:	15 c0       	rjmp	.+42     	; 0x132 <__vector_18+0x70>
	else if (a > 96 & a < 123)
 108:	20 91 00 01 	lds	r18, 0x0100
 10c:	90 91 00 01 	lds	r25, 0x0100
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	9b 37       	cpi	r25, 0x7B	; 123
 114:	08 f0       	brcs	.+2      	; 0x118 <__vector_18+0x56>
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	88 23       	and	r24, r24
 11a:	59 f0       	breq	.+22     	; 0x132 <__vector_18+0x70>
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	21 36       	cpi	r18, 0x61	; 97
 120:	08 f4       	brcc	.+2      	; 0x124 <__vector_18+0x62>
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	88 23       	and	r24, r24
 126:	29 f0       	breq	.+10     	; 0x132 <__vector_18+0x70>
		a -= 32;
 128:	80 91 00 01 	lds	r24, 0x0100
 12c:	80 52       	subi	r24, 0x20	; 32
 12e:	80 93 00 01 	sts	0x0100, r24
	usart_send(a);
 132:	80 91 00 01 	lds	r24, 0x0100
 136:	0e 94 59 00 	call	0xb2	; 0xb2 <usart_send>
}
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	bf 91       	pop	r27
 140:	af 91       	pop	r26
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	7f 91       	pop	r23
 148:	6f 91       	pop	r22
 14a:	5f 91       	pop	r21
 14c:	4f 91       	pop	r20
 14e:	3f 91       	pop	r19
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
