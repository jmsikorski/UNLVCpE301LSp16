
CpE301L7E3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800200  00800200  0000025a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000014c  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000108  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000015b  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  000006b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000018d  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000eb  00000000  00000000  000008dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	51 c0       	rjmp	.+162    	; 0x134 <__vector_36>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a1 30       	cpi	r26, 0x01	; 1
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	67 d0       	rcall	.+206    	; 0x1d4 <main>
 106:	6d c0       	rjmp	.+218    	; 0x1e2 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <usart_init>:
	}
}

void usart_init()
{
	UCSR1B = (1<<TXEN1) | (1<<RXEN1) | (1<<RXCIE1); // TX Enable, RX Enable, RX Interrupt enabled
 10a:	88 e9       	ldi	r24, 0x98	; 152
 10c:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10); // 8 bit data segment
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	80 93 ca 00 	sts	0x00CA, r24
	UBRR1 = 0x33; // Baud rate
 116:	83 e3       	ldi	r24, 0x33	; 51
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	90 93 cd 00 	sts	0x00CD, r25
 11e:	80 93 cc 00 	sts	0x00CC, r24
 122:	08 95       	ret

00000124 <usart_send>:
}

void usart_send (char data)
{
	while (! (UCSR1A & (1<<UDRE1)));
 124:	e8 ec       	ldi	r30, 0xC8	; 200
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	90 81       	ld	r25, Z
 12a:	95 ff       	sbrs	r25, 5
 12c:	fd cf       	rjmp	.-6      	; 0x128 <usart_send+0x4>
	UDR1 = data;
 12e:	80 93 ce 00 	sts	0x00CE, r24
 132:	08 95       	ret

00000134 <__vector_36>:
void usart_send(char);
volatile char a;
char recd = 0;

ISR(USART1_RX_vect)
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	0b b6       	in	r0, 0x3b	; 59
 140:	0f 92       	push	r0
 142:	2f 93       	push	r18
 144:	3f 93       	push	r19
 146:	4f 93       	push	r20
 148:	5f 93       	push	r21
 14a:	6f 93       	push	r22
 14c:	7f 93       	push	r23
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	af 93       	push	r26
 154:	bf 93       	push	r27
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
	a = UDR1;
 15a:	80 91 ce 00 	lds	r24, 0x00CE
 15e:	80 93 00 02 	sts	0x0200, r24
	if(a > 64 && a < 91)
 162:	80 91 00 02 	lds	r24, 0x0200
 166:	81 34       	cpi	r24, 0x41	; 65
 168:	50 f0       	brcs	.+20     	; 0x17e <__vector_36+0x4a>
 16a:	80 91 00 02 	lds	r24, 0x0200
 16e:	8b 35       	cpi	r24, 0x5B	; 91
 170:	30 f4       	brcc	.+12     	; 0x17e <__vector_36+0x4a>
		a += 32;
 172:	80 91 00 02 	lds	r24, 0x0200
 176:	80 5e       	subi	r24, 0xE0	; 224
 178:	80 93 00 02 	sts	0x0200, r24
 17c:	15 c0       	rjmp	.+42     	; 0x1a8 <__vector_36+0x74>
	else if (a > 96 & a < 123)
 17e:	20 91 00 02 	lds	r18, 0x0200
 182:	90 91 00 02 	lds	r25, 0x0200
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	9b 37       	cpi	r25, 0x7B	; 123
 18a:	08 f0       	brcs	.+2      	; 0x18e <__vector_36+0x5a>
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	88 23       	and	r24, r24
 190:	59 f0       	breq	.+22     	; 0x1a8 <__vector_36+0x74>
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	21 36       	cpi	r18, 0x61	; 97
 196:	08 f4       	brcc	.+2      	; 0x19a <__vector_36+0x66>
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	88 23       	and	r24, r24
 19c:	29 f0       	breq	.+10     	; 0x1a8 <__vector_36+0x74>
		a -= 32;
 19e:	80 91 00 02 	lds	r24, 0x0200
 1a2:	80 52       	subi	r24, 0x20	; 32
 1a4:	80 93 00 02 	sts	0x0200, r24
	usart_send(a);
 1a8:	80 91 00 02 	lds	r24, 0x0200
 1ac:	bb df       	rcall	.-138    	; 0x124 <usart_send>
}
 1ae:	ff 91       	pop	r31
 1b0:	ef 91       	pop	r30
 1b2:	bf 91       	pop	r27
 1b4:	af 91       	pop	r26
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	7f 91       	pop	r23
 1bc:	6f 91       	pop	r22
 1be:	5f 91       	pop	r21
 1c0:	4f 91       	pop	r20
 1c2:	3f 91       	pop	r19
 1c4:	2f 91       	pop	r18
 1c6:	0f 90       	pop	r0
 1c8:	0b be       	out	0x3b, r0	; 59
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <main>:

int main(void)
{
    /* Replace with your application code */
	usart_init();
 1d4:	9a df       	rcall	.-204    	; 0x10a <usart_init>
	sei();
 1d6:	78 94       	sei
	char a = 'A';
 1d8:	c1 e4       	ldi	r28, 0x41	; 65
    while (1)
	{
		a++;
 1da:	cf 5f       	subi	r28, 0xFF	; 255
		usart_send(a);
 1dc:	8c 2f       	mov	r24, r28
 1de:	a2 df       	rcall	.-188    	; 0x124 <usart_send>
	}
 1e0:	fc cf       	rjmp	.-8      	; 0x1da <main+0x6>

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
