
CpE301L9E3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800200  00000444  000004b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000444  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000512  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000544  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000074a  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f6  00000000  00000000  00000d16  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000460  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  0000136c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000021f  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003db  00000000  00000000  0000162f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001a0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e4       	ldi	r30, 0x44	; 68
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 35       	cpi	r26, 0x5A	; 90
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	71 d0       	rcall	.+226    	; 0x1f2 <main>
 110:	97 c1       	rjmp	.+814    	; 0x440 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <lcdCommanda>:
{'C','0','H','E'},
};

void lcdCommanda (unsigned char cmnd) // sends a command string to the lcd
{
	LCD_DPRT = cmnd; //send cmnd to data port
 114:	80 93 02 01 	sts	0x0102, r24
	LCD_CPRT &= ~(1<<LCD_RS); //RS = 0 for command
 118:	28 98       	cbi	0x05, 0	; 5
	LCD_CPRT &= ~(1<<LCD_RW); //RW = 0 for write
 11a:	29 98       	cbi	0x05, 1	; 5
	LCD_CPRT |= (1<<LCD_EN); //EN = 1 for H-to-L pulse
 11c:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	8a 95       	dec	r24
 122:	f1 f7       	brne	.-4      	; 0x120 <lcdCommanda+0xc>
 124:	00 c0       	rjmp	.+0      	; 0x126 <lcdCommanda+0x12>
	_delay_us(1); //wait to make enable wide
	LCD_CPRT &= ~(1<<LCD_EN); //EN = 0 for H-to_L pulse
 126:	2a 98       	cbi	0x05, 2	; 5
 128:	87 ec       	ldi	r24, 0xC7	; 199
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcdCommanda+0x18>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcdCommanda+0x1e>
 132:	00 00       	nop
 134:	08 95       	ret

00000136 <lcdData>:
	_delay_us(100); //wait to make enable wide
}

void lcdData(unsigned char data) // prints a char to the lcd
{
	LCD_DPRT = data; //send data to data port
 136:	80 93 02 01 	sts	0x0102, r24
	LCD_CPRT |= (1<<LCD_RS); //RS = 1 for data
 13a:	28 9a       	sbi	0x05, 0	; 5
	LCD_CPRT &= ~(1<<LCD_RW); //RW = 0 for write
 13c:	29 98       	cbi	0x05, 1	; 5
	LCD_CPRT |= (1<<LCD_EN); //EN = 1 for H-to-L pulse
 13e:	2a 9a       	sbi	0x05, 2	; 5
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	8a 95       	dec	r24
 144:	f1 f7       	brne	.-4      	; 0x142 <lcdData+0xc>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcdData+0x12>
	_delay_us(1); //wait to make enable wide
	LCD_CPRT &= ~(1<<LCD_EN); //EN = 0 for H-to_L pulse
 148:	2a 98       	cbi	0x05, 2	; 5
 14a:	87 ec       	ldi	r24, 0xC7	; 199
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <lcdData+0x18>
 152:	00 c0       	rjmp	.+0      	; 0x154 <lcdData+0x1e>
 154:	00 00       	nop
 156:	08 95       	ret

00000158 <lcd_init>:
	_delay_us(100); //wait to make enable wide
}

void lcd_init() // initialize the lcd
{
	LCD_DDDR = 0xFF;
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	80 93 01 01 	sts	0x0101, r24
	LCD_CDDR |= (1<<LCD_RS) | (1<<LCD_RW) | (1<<LCD_EN);
 15e:	84 b1       	in	r24, 0x04	; 4
 160:	87 60       	ori	r24, 0x07	; 7
 162:	84 b9       	out	0x04, r24	; 4
	LCD_CPRT &=~(1<<LCD_EN); //LCD_EN = 0
 164:	2a 98       	cbi	0x05, 2	; 5
 166:	8f e9       	ldi	r24, 0x9F	; 159
 168:	9f e0       	ldi	r25, 0x0F	; 15
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_init+0x12>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcd_init+0x18>
 170:	00 00       	nop
	_delay_us(2000); //wait for init
	lcdCommanda(0x38); //inti. LCD 2 line, 5x7
 172:	88 e3       	ldi	r24, 0x38	; 56
 174:	cf df       	rcall	.-98     	; 0x114 <lcdCommanda>
	lcdCommanda(0x0E); //display on, cursor on
 176:	8e e0       	ldi	r24, 0x0E	; 14
 178:	cd df       	rcall	.-102    	; 0x114 <lcdCommanda>
	lcdCommanda(0x01); //clear LCD
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	cb df       	rcall	.-106    	; 0x114 <lcdCommanda>
 17e:	8f e9       	ldi	r24, 0x9F	; 159
 180:	9f e0       	ldi	r25, 0x0F	; 15
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_init+0x2a>
 186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_init+0x30>
 188:	00 00       	nop
	_delay_us(2000); //wait
	lcdCommanda(0x06); //shift cursor right
 18a:	86 e0       	ldi	r24, 0x06	; 6
 18c:	c3 cf       	rjmp	.-122    	; 0x114 <lcdCommanda>
 18e:	08 95       	ret

00000190 <lcd_gotoxy>:
}

void lcd_gotoxy(unsigned char x, unsigned char y) // moves the cursor to a given x,y position
{
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	1f 92       	push	r1
 196:	1f 92       	push	r1
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstCharAdr[] = {0x80, 0xC0};
 19c:	90 e8       	ldi	r25, 0x80	; 128
 19e:	99 83       	std	Y+1, r25	; 0x01
 1a0:	90 ec       	ldi	r25, 0xC0	; 192
 1a2:	9a 83       	std	Y+2, r25	; 0x02
 1a4:	81 50       	subi	r24, 0x01	; 1
	lcdCommanda(firstCharAdr[y-1] + x -1);
 1a6:	fe 01       	movw	r30, r28
 1a8:	e6 0f       	add	r30, r22
 1aa:	f1 1d       	adc	r31, r1
 1ac:	90 81       	ld	r25, Z
 1ae:	89 0f       	add	r24, r25
 1b0:	b1 df       	rcall	.-158    	; 0x114 <lcdCommanda>
 1b2:	87 ec       	ldi	r24, 0xC7	; 199
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_gotoxy+0x26>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <lcd_gotoxy+0x2c>
 1bc:	00 00       	nop
	_delay_us(100);
}
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <lcd_print>:

void lcd_print(char * str) // prints a string to the lcd
{
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	fc 01       	movw	r30, r24
	unsigned char i = 0;
	while (str[i]!=0)
 1d0:	80 81       	ld	r24, Z
 1d2:	88 23       	and	r24, r24
 1d4:	51 f0       	breq	.+20     	; 0x1ea <lcd_print+0x22>
 1d6:	8f 01       	movw	r16, r30
 1d8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcdData(str[i]);
 1da:	ad df       	rcall	.-166    	; 0x136 <lcdData>
		i++;
 1dc:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(char * str) // prints a string to the lcd
{
	unsigned char i = 0;
	while (str[i]!=0)
 1de:	f8 01       	movw	r30, r16
 1e0:	ec 0f       	add	r30, r28
 1e2:	f1 1d       	adc	r31, r1
 1e4:	80 81       	ld	r24, Z
 1e6:	81 11       	cpse	r24, r1
 1e8:	f8 cf       	rjmp	.-16     	; 0x1da <lcd_print+0x12>
	{
		lcdData(str[i]);
		i++;
	}
}
 1ea:	cf 91       	pop	r28
 1ec:	1f 91       	pop	r17
 1ee:	0f 91       	pop	r16
 1f0:	08 95       	ret

000001f2 <main>:
//****************************************************************

//****************************************************************

int main(void)
{
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <main+0x6>
 1f8:	1f 92       	push	r1
 1fa:	1f 92       	push	r1
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
	unsigned char rowloc, colloc; // row and column locataion variables
	unsigned char data[5]; // Array for keys entered
	char i = 0; // position pointer for keys entered into array
	char reset = 0; // reset flag after successful unlock
	lcd_init(); // Initialize lcd display
 200:	ab df       	rcall	.-170    	; 0x158 <lcd_init>
	while(1)
	{
		KEY_DDR = 0x0F;
 202:	8f e0       	ldi	r24, 0x0F	; 15
 204:	81 b9       	out	0x01, r24	; 1
		KEY_PRT = 0xFF;
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	82 b9       	out	0x02, r24	; 2

		lcd_gotoxy(1,1); // Display instructions
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	c0 df       	rcall	.-128    	; 0x190 <lcd_gotoxy>
		lcd_print("Enter passcode:");
 210:	80 e1       	ldi	r24, 0x10	; 16
 212:	92 e0       	ldi	r25, 0x02	; 2
 214:	d9 df       	rcall	.-78     	; 0x1c8 <lcd_print>
		lcd_gotoxy(1,2);
 216:	62 e0       	ldi	r22, 0x02	; 2
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	ba df       	rcall	.-140    	; 0x190 <lcd_gotoxy>
		lcd_print("code: ");
 21c:	80 e2       	ldi	r24, 0x20	; 32
 21e:	92 e0       	ldi	r25, 0x02	; 2
 220:	d3 df       	rcall	.-90     	; 0x1c8 <lcd_print>

int main(void)
{
	unsigned char rowloc, colloc; // row and column locataion variables
	unsigned char data[5]; // Array for keys entered
	char i = 0; // position pointer for keys entered into array
 222:	f1 2c       	mov	r15, r1
				colloc = (KEY_PIN & 0xF0); //read columns
			} while (colloc == 0xF0); //wait for key press

			while(1)
			{
				KEY_PRT = 0xFE; //ground row 1
 224:	0f 2e       	mov	r0, r31
 226:	fe ef       	ldi	r31, 0xFE	; 254
 228:	8f 2e       	mov	r8, r31
 22a:	f0 2d       	mov	r31, r0
				KEY_PIN;
				colloc = (KEY_PIN & 0xF0); //read the columns
				if (colloc != 0xF0) //column detected
				{
					rowloc = 0; //save row location
 22c:	71 2c       	mov	r7, r1
					break; //exit while loop
				}
				KEY_PRT = 0xFD; //ground row 1
 22e:	0f 2e       	mov	r0, r31
 230:	fd ef       	ldi	r31, 0xFD	; 253
 232:	5f 2e       	mov	r5, r31
 234:	f0 2d       	mov	r31, r0
				KEY_PIN;
				colloc = (KEY_PIN & 0xF0); //read the columns
				if(colloc != 0xF0) //column detected
				{
					rowloc = 1; //save row location
 236:	66 24       	eor	r6, r6
 238:	63 94       	inc	r6
					break; //exit while loop
				}
				KEY_PRT = 0xFB; //ground row 1
 23a:	0f 2e       	mov	r0, r31
 23c:	fb ef       	ldi	r31, 0xFB	; 251
 23e:	2f 2e       	mov	r2, r31
 240:	f0 2d       	mov	r31, r0
				KEY_PIN;
				colloc = (KEY_PIN & 0xF0); //read the columns
				if(colloc != 0xF0) //column detected
				{
					rowloc = 2; //save row location
 242:	68 94       	set
 244:	99 24       	eor	r9, r9
 246:	91 f8       	bld	r9, 1
					break; //exit while loop
				}
				KEY_PRT = 0xF7; //ground row 1
 248:	0f 2e       	mov	r0, r31
 24a:	f7 ef       	ldi	r31, 0xF7	; 247
 24c:	3f 2e       	mov	r3, r31
 24e:	f0 2d       	mov	r31, r0
				KEY_PIN;
				colloc = (KEY_PIN & 0xF0); //read the columns
				if(colloc != 0xF0)
				{
					rowloc = 3; //save row location
 250:	0f 2e       	mov	r0, r31
 252:	f3 e0       	ldi	r31, 0x03	; 3
 254:	4f 2e       	mov	r4, r31
 256:	f0 2d       	mov	r31, r0
 258:	5e 01       	movw	r10, r28
 25a:	25 e0       	ldi	r18, 0x05	; 5
 25c:	a2 0e       	add	r10, r18
 25e:	b1 1c       	adc	r11, r1
		while(1)
		{
			reset = 0;
			do
			{
				KEY_PRT &= 0xF0; //ground all rows at once
 260:	82 b1       	in	r24, 0x02	; 2
 262:	80 7f       	andi	r24, 0xF0	; 240
 264:	82 b9       	out	0x02, r24	; 2
				colloc = (KEY_PIN & 0xF0); //read the columns
 266:	80 b1       	in	r24, 0x00	; 0
 268:	80 7f       	andi	r24, 0xF0	; 240
			} while (colloc != 0xF0); //check until all keys released
 26a:	80 3f       	cpi	r24, 0xF0	; 240
 26c:	c9 f7       	brne	.-14     	; 0x260 <main+0x6e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26e:	8f e7       	ldi	r24, 0x7F	; 127
 270:	98 e3       	ldi	r25, 0x38	; 56
 272:	e1 e0       	ldi	r30, 0x01	; 1
 274:	81 50       	subi	r24, 0x01	; 1
 276:	90 40       	sbci	r25, 0x00	; 0
 278:	e0 40       	sbci	r30, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <main+0x82>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0x8c>
 27e:	00 00       	nop
			do
			{
				do
				{
					_delay_ms(50); //call delay
					colloc = (KEY_PIN & 0xF0); //see if any key is pressed
 280:	80 b1       	in	r24, 0x00	; 0
 282:	80 7f       	andi	r24, 0xF0	; 240
				} while (colloc == 0xF0); //keep checking for key press
 284:	80 3f       	cpi	r24, 0xF0	; 240
 286:	99 f3       	breq	.-26     	; 0x26e <main+0x7c>
 288:	ff e7       	ldi	r31, 0x7F	; 127
 28a:	28 e3       	ldi	r18, 0x38	; 56
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	f1 50       	subi	r31, 0x01	; 1
 290:	20 40       	sbci	r18, 0x00	; 0
 292:	80 40       	sbci	r24, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <main+0x9c>
 296:	00 c0       	rjmp	.+0      	; 0x298 <main+0xa6>
 298:	00 00       	nop
				_delay_ms(50); //call delay for debounce
				colloc = (KEY_PIN & 0xF0); //read columns
 29a:	80 b1       	in	r24, 0x00	; 0
 29c:	80 7f       	andi	r24, 0xF0	; 240
			} while (colloc == 0xF0); //wait for key press
 29e:	80 3f       	cpi	r24, 0xF0	; 240
 2a0:	31 f3       	breq	.-52     	; 0x26e <main+0x7c>

			while(1)
			{
				KEY_PRT = 0xFE; //ground row 1
 2a2:	82 b8       	out	0x02, r8	; 2
				KEY_PIN;
 2a4:	80 b1       	in	r24, 0x00	; 0
				colloc = (KEY_PIN & 0xF0); //read the columns
 2a6:	80 b1       	in	r24, 0x00	; 0
 2a8:	80 7f       	andi	r24, 0xF0	; 240
				if (colloc != 0xF0) //column detected
 2aa:	80 3f       	cpi	r24, 0xF0	; 240
 2ac:	a9 f4       	brne	.+42     	; 0x2d8 <main+0xe6>
				{
					rowloc = 0; //save row location
					break; //exit while loop
				}
				KEY_PRT = 0xFD; //ground row 1
 2ae:	52 b8       	out	0x02, r5	; 2
				KEY_PIN;
 2b0:	80 b1       	in	r24, 0x00	; 0
				colloc = (KEY_PIN & 0xF0); //read the columns
 2b2:	80 b1       	in	r24, 0x00	; 0
 2b4:	80 7f       	andi	r24, 0xF0	; 240
				if(colloc != 0xF0) //column detected
 2b6:	80 3f       	cpi	r24, 0xF0	; 240
 2b8:	89 f4       	brne	.+34     	; 0x2dc <main+0xea>
				{
					rowloc = 1; //save row location
					break; //exit while loop
				}
				KEY_PRT = 0xFB; //ground row 1
 2ba:	22 b8       	out	0x02, r2	; 2
				KEY_PIN;
 2bc:	80 b1       	in	r24, 0x00	; 0
				colloc = (KEY_PIN & 0xF0); //read the columns
 2be:	80 b1       	in	r24, 0x00	; 0
 2c0:	80 7f       	andi	r24, 0xF0	; 240
				if(colloc != 0xF0) //column detected
 2c2:	80 3f       	cpi	r24, 0xF0	; 240
 2c4:	69 f4       	brne	.+26     	; 0x2e0 <main+0xee>
				{
					rowloc = 2; //save row location
					break; //exit while loop
				}
				KEY_PRT = 0xF7; //ground row 1
 2c6:	32 b8       	out	0x02, r3	; 2
				KEY_PIN;
 2c8:	80 b1       	in	r24, 0x00	; 0
				colloc = (KEY_PIN & 0xF0); //read the columns
 2ca:	80 b1       	in	r24, 0x00	; 0
 2cc:	80 7f       	andi	r24, 0xF0	; 240
				if(colloc != 0xF0)
 2ce:	80 3f       	cpi	r24, 0xF0	; 240
 2d0:	09 f4       	brne	.+2      	; 0x2d4 <main+0xe2>
 2d2:	40 c0       	rjmp	.+128    	; 0x354 <main+0x162>
				{
					rowloc = 3; //save row location
 2d4:	e4 2c       	mov	r14, r4
 2d6:	05 c0       	rjmp	.+10     	; 0x2e2 <main+0xf0>
				KEY_PRT = 0xFE; //ground row 1
				KEY_PIN;
				colloc = (KEY_PIN & 0xF0); //read the columns
				if (colloc != 0xF0) //column detected
				{
					rowloc = 0; //save row location
 2d8:	e7 2c       	mov	r14, r7
 2da:	03 c0       	rjmp	.+6      	; 0x2e2 <main+0xf0>
				KEY_PRT = 0xFD; //ground row 1
				KEY_PIN;
				colloc = (KEY_PIN & 0xF0); //read the columns
				if(colloc != 0xF0) //column detected
				{
					rowloc = 1; //save row location
 2dc:	e6 2c       	mov	r14, r6
 2de:	01 c0       	rjmp	.+2      	; 0x2e2 <main+0xf0>
				KEY_PRT = 0xFB; //ground row 1
				KEY_PIN;
				colloc = (KEY_PIN & 0xF0); //read the columns
				if(colloc != 0xF0) //column detected
				{
					rowloc = 2; //save row location
 2e0:	e9 2c       	mov	r14, r9
				}
				break;
			}
			//check column and send result to Port B
		
			if(colloc == 0xE0)
 2e2:	80 3e       	cpi	r24, 0xE0	; 224
 2e4:	89 f4       	brne	.+34     	; 0x308 <main+0x116>
			data[i] = (keypad[rowloc][0]);
 2e6:	ee 2d       	mov	r30, r14
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	ee 0f       	add	r30, r30
 2ec:	ff 1f       	adc	r31, r31
 2ee:	ee 0f       	add	r30, r30
 2f0:	ff 1f       	adc	r31, r31
 2f2:	e0 50       	subi	r30, 0x00	; 0
 2f4:	fe 4f       	sbci	r31, 0xFE	; 254
 2f6:	80 81       	ld	r24, Z
 2f8:	e1 e0       	ldi	r30, 0x01	; 1
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	ec 0f       	add	r30, r28
 2fe:	fd 1f       	adc	r31, r29
 300:	ef 0d       	add	r30, r15
 302:	f1 1d       	adc	r31, r1
 304:	80 83       	st	Z, r24
 306:	36 c0       	rjmp	.+108    	; 0x374 <main+0x182>
			else if(colloc == 0xD0)
 308:	80 3d       	cpi	r24, 0xD0	; 208
 30a:	89 f4       	brne	.+34     	; 0x32e <main+0x13c>
			data[i] = (keypad[rowloc][1]);
 30c:	ee 2d       	mov	r30, r14
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	ee 0f       	add	r30, r30
 312:	ff 1f       	adc	r31, r31
 314:	ee 0f       	add	r30, r30
 316:	ff 1f       	adc	r31, r31
 318:	e0 50       	subi	r30, 0x00	; 0
 31a:	fe 4f       	sbci	r31, 0xFE	; 254
 31c:	81 81       	ldd	r24, Z+1	; 0x01
 31e:	e1 e0       	ldi	r30, 0x01	; 1
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	ec 0f       	add	r30, r28
 324:	fd 1f       	adc	r31, r29
 326:	ef 0d       	add	r30, r15
 328:	f1 1d       	adc	r31, r1
 32a:	80 83       	st	Z, r24
 32c:	23 c0       	rjmp	.+70     	; 0x374 <main+0x182>
			else if(colloc == 0xB0)
 32e:	80 3b       	cpi	r24, 0xB0	; 176
 330:	89 f4       	brne	.+34     	; 0x354 <main+0x162>
			data[i] = (keypad[rowloc][2]);
 332:	ee 2d       	mov	r30, r14
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	ee 0f       	add	r30, r30
 338:	ff 1f       	adc	r31, r31
 33a:	ee 0f       	add	r30, r30
 33c:	ff 1f       	adc	r31, r31
 33e:	e0 50       	subi	r30, 0x00	; 0
 340:	fe 4f       	sbci	r31, 0xFE	; 254
 342:	82 81       	ldd	r24, Z+2	; 0x02
 344:	e1 e0       	ldi	r30, 0x01	; 1
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	ec 0f       	add	r30, r28
 34a:	fd 1f       	adc	r31, r29
 34c:	ef 0d       	add	r30, r15
 34e:	f1 1d       	adc	r31, r1
 350:	80 83       	st	Z, r24
 352:	10 c0       	rjmp	.+32     	; 0x374 <main+0x182>
			else
			data[i] = (keypad[rowloc][3]);
 354:	ee 2d       	mov	r30, r14
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	ee 0f       	add	r30, r30
 35a:	ff 1f       	adc	r31, r31
 35c:	ee 0f       	add	r30, r30
 35e:	ff 1f       	adc	r31, r31
 360:	e0 50       	subi	r30, 0x00	; 0
 362:	fe 4f       	sbci	r31, 0xFE	; 254
 364:	83 81       	ldd	r24, Z+3	; 0x03
 366:	e1 e0       	ldi	r30, 0x01	; 1
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	ec 0f       	add	r30, r28
 36c:	fd 1f       	adc	r31, r29
 36e:	ef 0d       	add	r30, r15
 370:	f1 1d       	adc	r31, r1
 372:	80 83       	st	Z, r24
			i++;
 374:	11 e0       	ldi	r17, 0x01	; 1
 376:	1f 0d       	add	r17, r15
			lcdData(data[i-1]);
 378:	fe 01       	movw	r30, r28
 37a:	e1 0f       	add	r30, r17
 37c:	f1 1d       	adc	r31, r1
 37e:	00 81       	ld	r16, Z
 380:	80 2f       	mov	r24, r16
 382:	d9 de       	rcall	.-590    	; 0x136 <lcdData>
			if(data[i-1] == 'E') // User has pressed the 'Enter' key
 384:	05 34       	cpi	r16, 0x45	; 69
 386:	09 f0       	breq	.+2      	; 0x38a <main+0x198>
 388:	57 c0       	rjmp	.+174    	; 0x438 <main+0x246>
			{
				lcd_gotoxy(1,2);
 38a:	69 2d       	mov	r22, r9
 38c:	86 2d       	mov	r24, r6
 38e:	00 df       	rcall	.-512    	; 0x190 <lcd_gotoxy>
				if(data[0] == '0' && data[1] == '4' && data[2] == '2' && data[3] == '9') // Check last 4 keys entered
 390:	89 81       	ldd	r24, Y+1	; 0x01
 392:	80 33       	cpi	r24, 0x30	; 48
 394:	f9 f4       	brne	.+62     	; 0x3d4 <main+0x1e2>
 396:	8a 81       	ldd	r24, Y+2	; 0x02
 398:	84 33       	cpi	r24, 0x34	; 52
 39a:	e1 f4       	brne	.+56     	; 0x3d4 <main+0x1e2>
 39c:	8b 81       	ldd	r24, Y+3	; 0x03
 39e:	82 33       	cpi	r24, 0x32	; 50
 3a0:	c9 f4       	brne	.+50     	; 0x3d4 <main+0x1e2>
 3a2:	8c 81       	ldd	r24, Y+4	; 0x04
 3a4:	89 33       	cpi	r24, 0x39	; 57
 3a6:	b1 f4       	brne	.+44     	; 0x3d4 <main+0x1e2>
				{
					lcd_print("  Lock Opened   "); // If correct display success message
 3a8:	87 e2       	ldi	r24, 0x27	; 39
 3aa:	92 e0       	ldi	r25, 0x02	; 2
 3ac:	0d df       	rcall	.-486    	; 0x1c8 <lcd_print>
					lcd_gotoxy(1,2);
 3ae:	69 2d       	mov	r22, r9
 3b0:	86 2d       	mov	r24, r6
 3b2:	ee de       	rcall	.-548    	; 0x190 <lcd_gotoxy>
 3b4:	9f ef       	ldi	r25, 0xFF	; 255
 3b6:	e3 ed       	ldi	r30, 0xD3	; 211
 3b8:	f0 e3       	ldi	r31, 0x30	; 48
 3ba:	91 50       	subi	r25, 0x01	; 1
 3bc:	e0 40       	sbci	r30, 0x00	; 0
 3be:	f0 40       	sbci	r31, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <main+0x1c8>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <main+0x1d2>
 3c4:	00 00       	nop
					_delay_ms(2000); // Wait 2 seconds and reset the program
					lcd_print("code:           ");  // clear success message, reset code entry
 3c6:	88 e3       	ldi	r24, 0x38	; 56
 3c8:	92 e0       	ldi	r25, 0x02	; 2
 3ca:	fe de       	rcall	.-516    	; 0x1c8 <lcd_print>
					lcd_gotoxy(7,2);
 3cc:	69 2d       	mov	r22, r9
 3ce:	87 e0       	ldi	r24, 0x07	; 7
 3d0:	df de       	rcall	.-578    	; 0x190 <lcd_gotoxy>
					i = 0; // Reset code position
					reset = 1;
 3d2:	30 c0       	rjmp	.+96     	; 0x434 <main+0x242>
				}
				else
				{
					lcd_print(" Incorrect Code ");  // If invalid code is entered
 3d4:	89 e4       	ldi	r24, 0x49	; 73
 3d6:	92 e0       	ldi	r25, 0x02	; 2
 3d8:	f7 de       	rcall	.-530    	; 0x1c8 <lcd_print>
					lcd_gotoxy(1,2);
 3da:	69 2d       	mov	r22, r9
 3dc:	86 2d       	mov	r24, r6
 3de:	d8 de       	rcall	.-592    	; 0x190 <lcd_gotoxy>
 3e0:	2f ef       	ldi	r18, 0xFF	; 255
 3e2:	83 ed       	ldi	r24, 0xD3	; 211
 3e4:	90 e3       	ldi	r25, 0x30	; 48
 3e6:	21 50       	subi	r18, 0x01	; 1
 3e8:	80 40       	sbci	r24, 0x00	; 0
 3ea:	90 40       	sbci	r25, 0x00	; 0
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <main+0x1f4>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <main+0x1fe>
 3f0:	00 00       	nop
					_delay_ms(2000);  // Wait 2 seconds and reset the program
					lcd_print("code:           ");  // clear fail message, reset code entry
 3f2:	88 e3       	ldi	r24, 0x38	; 56
 3f4:	92 e0       	ldi	r25, 0x02	; 2
 3f6:	e8 de       	rcall	.-560    	; 0x1c8 <lcd_print>
					lcd_gotoxy(7,2);
 3f8:	69 2d       	mov	r22, r9
 3fa:	87 e0       	ldi	r24, 0x07	; 7
 3fc:	c9 de       	rcall	.-622    	; 0x190 <lcd_gotoxy>
 3fe:	1a c0       	rjmp	.+52     	; 0x434 <main+0x242>
					i = 0;  // Reset code position
				}				 
			}
			if(i > 4 && reset != 1) // Loop for when a 5th key is entered, not a successful unlock
			{
				lcd_gotoxy(7,2); // move cursor to begining of code display
 400:	69 2d       	mov	r22, r9
 402:	87 e0       	ldi	r24, 0x07	; 7
 404:	c5 de       	rcall	.-630    	; 0x190 <lcd_gotoxy>
 406:	fe 01       	movw	r30, r28
 408:	32 96       	adiw	r30, 0x02	; 2
 40a:	6f 01       	movw	r12, r30
 40c:	8e 01       	movw	r16, r28
 40e:	0f 5f       	subi	r16, 0xFF	; 255
 410:	1f 4f       	sbci	r17, 0xFF	; 255
				for(int a = 0; a < 4; a++)
				{
					data[a] = data[a+1];  // shift entries 1 spot to the left and display
 412:	f6 01       	movw	r30, r12
 414:	81 91       	ld	r24, Z+
 416:	6f 01       	movw	r12, r30
 418:	f8 01       	movw	r30, r16
 41a:	81 93       	st	Z+, r24
 41c:	8f 01       	movw	r16, r30
					lcdData(data[a]);
 41e:	8b de       	rcall	.-746    	; 0x136 <lcdData>
				}				 
			}
			if(i > 4 && reset != 1) // Loop for when a 5th key is entered, not a successful unlock
			{
				lcd_gotoxy(7,2); // move cursor to begining of code display
				for(int a = 0; a < 4; a++)
 420:	0a 15       	cp	r16, r10
 422:	1b 05       	cpc	r17, r11
 424:	b1 f7       	brne	.-20     	; 0x412 <main+0x220>
				{
					data[a] = data[a+1];  // shift entries 1 spot to the left and display
					lcdData(data[a]);
				}
				lcdData(' '); // clear 5th entry
 426:	80 e2       	ldi	r24, 0x20	; 32
 428:	86 de       	rcall	.-756    	; 0x136 <lcdData>
				lcdCommanda(0x10); // shift cursor left
 42a:	80 e1       	ldi	r24, 0x10	; 16
 42c:	73 de       	rcall	.-794    	; 0x114 <lcdCommanda>
				lcdCommanda(0x10); // shift cursor left
 42e:	80 e1       	ldi	r24, 0x10	; 16
 430:	71 de       	rcall	.-798    	; 0x114 <lcdCommanda>
 432:	16 cf       	rjmp	.-468    	; 0x260 <main+0x6e>
			data[i] = (keypad[rowloc][1]);
			else if(colloc == 0xB0)
			data[i] = (keypad[rowloc][2]);
			else
			data[i] = (keypad[rowloc][3]);
			i++;
 434:	f7 2c       	mov	r15, r7
 436:	14 cf       	rjmp	.-472    	; 0x260 <main+0x6e>
					lcd_print("code:           ");  // clear fail message, reset code entry
					lcd_gotoxy(7,2);
					i = 0;  // Reset code position
				}				 
			}
			if(i > 4 && reset != 1) // Loop for when a 5th key is entered, not a successful unlock
 438:	15 30       	cpi	r17, 0x05	; 5
 43a:	10 f7       	brcc	.-60     	; 0x400 <main+0x20e>
			data[i] = (keypad[rowloc][1]);
			else if(colloc == 0xB0)
			data[i] = (keypad[rowloc][2]);
			else
			data[i] = (keypad[rowloc][3]);
			i++;
 43c:	f1 2e       	mov	r15, r17
 43e:	10 cf       	rjmp	.-480    	; 0x260 <main+0x6e>

00000440 <_exit>:
 440:	f8 94       	cli

00000442 <__stop_program>:
 442:	ff cf       	rjmp	.-2      	; 0x442 <__stop_program>
